;; help emacs find extensions and external utilities
(add-to-list 'load-path "~/.emacs.d/lisp/")
(setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
(setq exec-path (append exec-path '("/usr/local/bin")))
(setenv "PATH" (concat (getenv "PATH") ":/usr/texbin"))
(setq exec-path (append exec-path '("/usr/texbin")))
(setenv "PATH" (concat (getenv "PATH") ":~/.cabal/bin"))
(setq exec-path (append exec-path '("~/.cabal/bin")))

;; focus emacs when started from terminal
(x-focus-frame nil)

;; spell check most things
(add-hook 'text-mode-hook 'flyspell-mode)
(add-hook 'prog-mode-hook 'flyspell-prog-mode)

;; PROOF GENERAL
(load-file "/usr/local/share/emacs/site-lisp/ProofGeneral/generic/proof-site.el")

;; prettify coq symbols
(global-prettify-symbols-mode 1)
(setq coq-symbols
  '(("forall" ?∀)
    ("->" ?→)
    ("exists" ?∃)
    ("=>" ?⇒)
    ("False" ?⊥)
    ("True" ?⊤)))

(add-hook 'coq-mode-hook
          (lambda ()
            (setq prettify-symbols-alist coq-symbols)))

;; AGDA
(load-file (let ((coding-system-for-read 'utf-8))
                (shell-command-to-string "agda-mode locate")))

;; AUCTEX
(add-to-list 'load-path "/usr/local/share/emacs/site-lisp")
(require 'tex-site)

;;;; AUTeX says to use these, but they don't work in homebrew?
;;;; (load "auctex.el" nil t t)
;;;; (load "preview-latex.el" nil t t)

(setq TeX-auto-save t)    ; parse on save
(setq TeX-parse-self t)   ; parse on load
(setq TeX-save-query nil) ; don't ask before saving
(setq TeX-PDF-mode t)     ; use pdflatex

;; MARKDOWN
(autoload 'markdown-mode "markdown-mode"
   "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))

;; package.el
(require 'package)
(add-to-list 'package-archives
  '("marmalade" . "http://marmalade-repo.org/packages/"))
(package-initialize)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(LaTeX-enable-toolbar nil)
 '(agda2-include-dirs (quote ("." "/Users/ztatlock/lib/agda/lib-0.7/src")))
 '(ansi-color-names-vector ["#242424" "#e5786d" "#95e454" "#cae682" "#8ac6f2" "#333366" "#ccaa8f" "#f6f3e8"])
 '(bibtex-align-at-equal-sign t)
 '(column-number-mode t)
 '(custom-enabled-themes (quote (wheatgrass)))
 '(haskell-mode-hook (quote (turn-on-haskell-indent)))
 '(menu-bar-mode nil)
 '(scroll-bar-mode nil)
 '(show-paren-mode t)
 '(tool-bar-mode nil)
 '(visible-bell t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:height 150)))))

;; Local Variables:
;; mode: emacs-lisp
;; End:
